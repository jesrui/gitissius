set timeout 30

##############################################################################

# Just to warm up and load python and all needed libraries
set test "version"
spawn $PYTHON $GI
expect {
    -re "Gitissius v.*"	{ pass $test }

    timeout     { fail "$test: timeout" }
    eof         { fail "$test: EOF" }
    default     { fail $test }
}

# Now that python is loaded we can reduce the timeout.
set timeout 3

##############################################################################

# The iss array contains the issue values entered on `git issius add`
# or `edit`.
# Empty strings are used to accept default values.
array unset iss
array set iss {
    title           {this is the issue title. It is so long that it will be trimmed by `git issius list`}
    severity        {}
    type            {}
    reported_from   {Donald Duck <donald@example.com}
    assigned_to     {}
    status          {}
    desc1           {this is the first line of the issue description}
    desc2           {this is the second line of the issue description}
}

set test "add issue"
spawn $PYTHON $GI add
set iss(id) [edit_or_add_issue $test iss]

##############################################################################

# The show array contains the issue values shown on the `git issius add`
# or `edit` prompts and `show` and `list` commands.
# The values will be transformed as needed, e.g. capitalized.
array unset show
if {$iss(id) ne {}} {
    array set show [array get show_default]
    update_show show iss {id title reported_from desc1 desc2}
}

set test "show issue"
if {$show(id) eq {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI show $show(id)
    show_issue $test show false
}

##############################################################################

array set iss {
    comment_reported_from   {}
    comment1                {this is the first line of the issue comment}
    comment2                {this is the second line of the issue comment}
}

set show(comment_reported_from) {Micky Mouse <micky.mouse@example.com>}

set test "add issue comment"
if {$show(id) eq {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI comment $show(id)

    expect_after {
        timeout         { fail "$test: timeout" }
        eof             { fail "$test: EOF" }
        default         { fail $test }
    }

    expect -re "${C}Commenting on:$C ${C}$show(title)$C" {
        expect -ex "Reported From \($show(comment_reported_from)\): " {
            send "$iss(comment_reported_from)\n"
            expect -ex {Description (End with a line containing only '.'): } {
                send "$iss(comment1)\n$iss(comment2)\n.\n"
                expect -ex "Comment issue: $show(id)" { pass $test }
            }
        }
    }

    catch expect_after ;# clean up
}

##############################################################################

update_show show iss {comment1 comment2}

set test "show issue with comments"
if {$show(id) eq {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI show --all $show(id)
    show_issue $test show true
}

##############################################################################

set test "list issues (only one issue)"
if {$show(id) eq {}} {
    unresolved $test
} else {
    set show_dict [dict create]
    dict append show_dict $show(id) [dict create {*}[array get show]]
    spawn $PYTHON $GI list
    list_issues $test $show_dict
}

##############################################################################

array set iss {
    severity            {high}
    assigned_to         {Micky Mouse <micky.mouse@example.com>}
    status              {assigned}
}

set test "edit issue"
if {$show(id) eq {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI edit $show(id)
    if {[edit_or_add_issue $test iss show] eq $show(id)} {
        update_show show iss {severity assigned_to status}
    }
}

##############################################################################

set test "show edited issue (with comments)"
if {$show(id) eq {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI show --all $show(id)
    show_issue $test show true
}

##############################################################################

set test "my issues"
if {$show(id) eq {}} {
    unresolved $test
} else {
    set show_dict [dict create]
    dict append show_dict $show(id) [dict create {*}[array get show]]
    spawn $PYTHON $GI my
    list_issues $test $show_dict 1
}

##############################################################################

array unset iss2
array set iss2 {
    title           {this is the second issue}
    severity        {medium}
    type            {feature}
    reported_from   {}
    assigned_to     {}
    status          {}
    desc1           {this is the first line of the description of the second issue}
    desc2           {this is the second line of the description of the second issue}
}

set test "add second issue"
spawn $PYTHON $GI add
set iss2(id) [edit_or_add_issue $test iss2]

##############################################################################

array unset show2
if {$iss2(id) ne {}} {
    array set show2 [array get show_default]
    update_show show2 iss2 {id title severity type desc1 desc2}
}

set test "show second issue"
if {$show2(id) eq {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI show $show2(id)
    show_issue $test show2 false
}

##############################################################################

set test "list issues (two issues in the database)"
if {$show(id) eq {} || $show2(id) eq {}} {
    unresolved $test
} else {
    set show_dict [dict create]
    dict append show_dict $show(id) [dict create {*}[array get show]]
    dict append show_dict $show2(id) [dict create {*}[array get show2]]
    spawn $PYTHON $GI list
    list_issues $test $show_dict 2
}

##############################################################################

set test "my issues (only one of the two issues of the database)"
if {$show(id) eq {}} {
    unresolved $test
} else {
    set show_dict [dict create]
    dict append show_dict $show(id) [dict create {*}[array get show]]
    spawn $PYTHON $GI my
    list_issues $test $show_dict 1
}

##############################################################################

set test "delete issue"
if {$show(id) eq {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI delete $show(id)
    set iss(id) [delete_issue $test show]
    set show(id) $iss(id)
}

##############################################################################

set test "delete second issue"
if {$show2(id) eq {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI delete $show2(id)
    set iss2(id) [delete_issue $test show2]
    set show2(id) $iss2(id)
}

##############################################################################
set test "list issues (empty list)"

if {$show(id) ne {} || $show2(id) ne {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI list
    list_issues $test [dict create] 0
}

##############################################################################
