set timeout 30

# regexp for the issue id
set Id {[0-9a-f]{64}}
# regexp that match any number of consecutive ANSI color escape sequences from colorama
set C {(?:\e\[[0-9;]*m)*}

##############################################################################

# Just to warm up and load python and all needed libraries
set test "version"
spawn $PYTHON $GI
expect {
    -re "Gitissius v.*"	{ pass $test }

    timeout     { fail "$test: timeout" }
    eof         { fail "$test: EOF" }
    default     { fail $test }
}

set iss(title)      {this is the issue title. It is so long that it will be trimmed by `git issuis list`}
set iss(severity)   {low}
set iss(type)       {bug}
set iss(author)     {}
set iss(assign)     {}
set iss(status)     {new}
set iss(desc1)      {this is the first line of the issue description}
set iss(desc2)      {this is the second line of the issue description}

# Now that python is loaded we can reduce the timeout.
set timeout 3

##############################################################################

set test "add issue"
spawn $PYTHON $GI add
expect {
    -re {Title \(.*\): } { send "$iss(title)\n"; exp_continue }
    -ex {Type (bug) [b/f]: }
        { send "[string index $iss(type) 0]\n"; exp_continue }
    -ex {Severity (low) [h/m/l]: }
        { send "[string index $iss(severity) 0]\n"; exp_continue }
    -re {Reported From \(.*\): }	{ send "$iss(author)\n"; exp_continue }
    -re {Assigned To \(None\): }	{ send "$iss(assign)\n"; exp_continue }
    -ex {Status (new) [a/n/c/i]: }
        { send "[string index $iss(status) 0]\n"; exp_continue }
    -ex {Description (End with a line containing only '.'): }
        { send "$iss(desc1)\n$iss(desc2)\n.\n"; exp_continue }
    -ex {Create issue (y)? }	{ send "\n"; exp_continue }
    -re "Created issue: ($Id)"	{
        set issue_id $expect_out(1,string)
        pass $test
    }

    timeout { fail "$test: timeout" }
    eof { fail "$test: EOF" }
    default { fail $test }
}

##############################################################################

set iss(author)     "$git_user_name <$git_user_email>"
set iss(assign)     None

set issue_template "^${C}Id$C:$C $C$issue_id$C\r
${C}Title$C:$C $C$iss(title)$C\r
${C}Type$C:$C $C[string totitle $iss(type)]$C\r
${C}Severity$C:$C $C[string totitle $iss(severity)]$C\r
${C}Reported From$C:$C ${C}$iss(author)$C\r
${C}Assigned To$C:$C ${C}$iss(assign)$C\r
${C}Created On$C:$C ${C}.*$C\r
${C}Updated On$C:$C ${C}.*$C\r
${C}Status$C:$C $C[string totitle $iss(status)]$C\r
${C}Description$C:$C\r
  $C$iss(desc1)$C\r
  $C$iss(desc2)$C\r
"

set test "show issue"
if {![info exists issue_id]} {
    unresolved $test
} else {
    spawn $PYTHON $GI show $issue_id
    expect {
        -re "$issue_template" {pass $test}

        timeout { fail "$test: timeout" }
        eof { fail "$test: EOF" }
        default { fail $test }
    }
}

##############################################################################

set SEP {\W+\|\W+} ;# field sepatator: " | "
set listing_header "${C}ID${C}${SEP}${C}Title${C}${SEP}${C}Assigned To${C}${SEP}${C}Type${C}${SEP}${C}Status${C}"

set issue_template [string map {"\n" ""} "
$C[string range $issue_id 0 4]$C
$SEP${C}(.*?)$C
$SEP${C}$iss(assign)$C
$SEP${C}[string totitle $iss(type)]$C
$SEP${C}[string totitle $iss(status)]$C
"]

set test "list issues"
spawn $PYTHON $GI list
expect {
    -re "$listing_header.*$issue_template" {
        set got_title $expect_out(1,string)
        if {[string equal -length [string length $got_title] \
                $got_title $iss(title)]} {
            pass $test
        } else {
            fail "$test: title mismatch"
        }
    }

    timeout { fail "$test: timeout" }
    eof { fail "$test: EOF" }
    default { fail $test }
}
unset issue_id
