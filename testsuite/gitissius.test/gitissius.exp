set timeout 30

##############################################################################

# Just to warm up and load python and all needed libraries
set test "version"
spawn $PYTHON $GI
expect {
    -re "Gitissius v.*"	{ pass $test }

    timeout     { fail "$test: timeout" }
    eof         { fail "$test: EOF" }
    default     { fail $test }
}

# Now that python is loaded we can reduce the timeout.
set timeout 3

##############################################################################

array unset iss
array unset show

# The iss array contains the issue values entered on `git issius add`
# or `edit`.
# Empty strings are used to accept default values.
set iss(title)              {this is the issue title. It is so long that it will be trimmed by `git issius list`}
set iss(severity)           {}
set iss(type)               {}
set iss(reported_from)      {Donald Duck <donald@example.com}
set iss(assigned_to)        {}
set iss(status)             {}
set iss(desc1)              {this is the first line of the issue description}
set iss(desc2)              {this is the second line of the issue description}

# The show array contains the issue values shown on the `git issius add`
# or `edit` prompts and `show` and `list` commands.
# The values will be transformed as needed, e.g. capitalized.
set show(title)             {None}
set show(severity)          {low}
set show(type)              {bug}
set show(reported_from)     {Micky Mouse <micky.mouse@example.com>}
set show(assigned_to)       {None}
set show(status)            {new}

set test "add issue"
spawn $PYTHON $GI add
set iss(id) [edit_or_add_issue $test iss show]

##############################################################################

set show(id)                $iss(id)
set show(title)             $iss(title)
set show(reported_from)     $iss(reported_from)
set show(desc1)             $iss(desc1)
set show(desc2)             $iss(desc2)

set test "show issue"
if {$show(id) eq {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI show $show(id)
    show_issue $test show false
}

##############################################################################

set iss(comment_reported_from)  {}
set iss(comment1)               {this is the first line of the issue comment}
set iss(comment2)               {this is the second line of the issue comment}

set show(comment_reported_from) {Micky Mouse <micky.mouse@example.com>}

set test "add issue comment"
if {$show(id) eq {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI comment $show(id)

    expect_after {
        timeout         { fail "$test: timeout" }
        eof             { fail "$test: EOF" }
        default         { fail $test }
    }

    expect -re "${C}Commenting on:$C ${C}$show(title)$C" {
        expect -ex "Reported From \($show(comment_reported_from)\): " {
            send "$iss(comment_reported_from)\n"
            expect -ex {Description (End with a line containing only '.'): } {
                send "$iss(comment1)\n$iss(comment2)\n.\n"
                expect -ex "Comment issue: $show(id)" { pass $test }
            }
        }
    }

    catch expect_after ;# clean up
}

##############################################################################

set show(comment1) $iss(comment1)
set show(comment2) $iss(comment2)

set test "show issue with comments"
if {$show(id) eq {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI show --all $show(id)
    show_issue $test show true
}

##############################################################################

set test "list issues (only one issue)"
if {$show(id) eq {}} {
    unresolved $test
} else {
    set show_dict [dict create]
    dict append show_dict $show(id) [dict create {*}[array get show]]
    spawn $PYTHON $GI list
    list_issues $test $show_dict
}

##############################################################################

set iss(severity)           {high}
set iss(assigned_to)        {Micky Mouse <micky.mouse@example.com>}
set iss(status)             {assigned}

set test "edit issue"
if {$show(id) eq {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI edit $show(id)
    edit_or_add_issue $test iss show
}

##############################################################################

set show(severity)          $iss(severity)
set show(assigned_to)       $iss(assigned_to)
set show(status)            $iss(status)

set test "show edited issue (with comments)"
if {$show(id) eq {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI show --all $show(id)
    show_issue $test show true
}

##############################################################################

set test "my issues"
if {$show(id) eq {}} {
    unresolved $test
} else {
    set show_dict [dict create]
    dict append show_dict $show(id) [dict create {*}[array get show]]
    spawn $PYTHON $GI my
    list_issues $test $show_dict 1
}

##############################################################################

array unset iss2
array unset show2

set iss2(title)             {this is the second issue}
set iss2(severity)          {medium}
set iss2(type)              {feature}
set iss2(reported_from)     {}
set iss2(assigned_to)       {}
set iss2(status)            {}
set iss2(desc1)             {this is the first line of the description of the second issue}
set iss2(desc2)             {this is the second line of the description of the second issue}

set show2(title)            {None}
set show2(severity)         {low}
set show2(type)             {bug}
set show2(reported_from)    {Micky Mouse <micky.mouse@example.com>}
set show2(assigned_to)      {None}
set show2(status)           {new}

set test "add second issue"
spawn $PYTHON $GI add
set iss2(id) [edit_or_add_issue $test iss2 show2]

##############################################################################

set show2(id)               $iss2(id)
set show2(title)            $iss2(title)
set show2(severity)         $iss2(severity)
set show2(type)             $iss2(type)
set show2(desc1)            $iss2(desc1)
set show2(desc2)            $iss2(desc2)

set test "show second issue"
if {$show2(id) eq {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI show $show2(id)
    show_issue $test show2 false
}

##############################################################################

set test "list issues (two issues in the database)"
if {$show(id) eq {} || $show2(id) eq {}} {
    unresolved $test
} else {
    set show_dict [dict create]
    dict append show_dict $show(id) [dict create {*}[array get show]]
    dict append show_dict $show2(id) [dict create {*}[array get show2]]
    spawn $PYTHON $GI list
    list_issues $test $show_dict 2
}

##############################################################################

set test "my issues (only one of the two issues of the database)"
if {$show(id) eq {}} {
    unresolved $test
} else {
    set show_dict [dict create]
    dict append show_dict $show(id) [dict create {*}[array get show]]
    spawn $PYTHON $GI my
    list_issues $test $show_dict 1
}

##############################################################################

set test "delete issue"
if {$show(id) eq {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI delete $show(id)
    set iss(id) [delete_issue $test show]
    set show(id) $iss(id)
}

##############################################################################

set test "delete second issue"
if {$show2(id) eq {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI delete $show2(id)
    set iss2(id) [delete_issue $test show2]
    set show2(id) $iss2(id)
}

##############################################################################
set test "list issues (empty list)"

if {$show(id) ne {} || $show2(id) ne {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI list
    list_issues $test [dict create] 0
}

##############################################################################
