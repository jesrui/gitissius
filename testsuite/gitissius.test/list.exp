##############################################################################

source [file join $srcdir lib prepare_issue_1.exp]

##############################################################################

# Sleep one sec to ensure that iss and iss2 have different created_on and
# updated_on times
after 1000

source [file join $srcdir lib prepare_issue_2.exp]

##############################################################################

set filter_by "
assigned_to assigned_to__exact assigned_to__not assigned_to__startwith
created_on created_on__exact created_on__not created_on__startswith
id id__exact id__not id__startswith
reported_from reported_from__exact reported_from__not reported_from__startswith
status status__exact status__not status__startswith title
title__exact title__not title__startswith type
type__exact type__not type__startswith
updated_on updated_on__exact updated_on__not updated_on__startswith
"

foreach f $filter_by {
    set test "list --filter=$f"

    if {$show(id) eq {} || $show2(id) eq {}} {
        unresolved $test
        continue
    }

    # The expected show array is either show or show2 depending on the filter
    # ending.
    if {[string first __not $f] == -1 } {
        array set expected [array get show]
    } else {
        array set expected [array get show2]
    }
#    puts "$test expected [array get expected]"

    # Map filter names to show array names
    regsub "__.*$" $f {} tag

    # launch `git issius list` command and check output 
    set show_dict [dict create]
    dict append show_dict $expected(id) [dict create {*}[array get expected]]
#    puts "$test tag $tag show_dict $show_dict"
    spawn $PYTHON $GI list --filter=$f:$show($tag)
    list_issues $test $show_dict 1
}

##############################################################################

set test "list --filter=id (substring)"
if {$show(id) eq {}} {
    unresolved $test
} else {
    set show_dict [dict create]
    dict append show_dict $show(id) [dict create {*}[array get show]]
    spawn $PYTHON $GI list --filter=id:[string range $show(id) 10 20]
    list_issues $test $show_dict 1
}

##############################################################################

set sorted_ids [lsort "$show(id)    $show2(id)"]
set sort_order {
    assigned_to     "$show2(id)   $show(id)"
    created_on      "$show(id)    $show2(id)"
    id              $sorted_ids
    reported_from   "$show(id)    $show2(id)"
    status          "$show(id)    $show2(id)"
    title           "$show(id)    $show2(id)"
    type            "$show(id)    $show2(id)"
    updated_on      "$show(id)    $show2(id)"
}

foreach {order id_order} $sort_order {
    set test "list --sort=$order"

    if {$show(id) eq {} || $show2(id) eq {}} {
        unresolved $test
        continue
    }

    set show_dict [dict create]
    dict append show_dict $show(id) [dict create {*}[array get show]]
    dict append show_dict $show2(id) [dict create {*}[array get show2]]

    set id_order [subst $id_order]

    spawn $PYTHON $GI list --sort=$order
    list_issues $test $show_dict 2 $id_order
}

##############################################################################

set test "close issue"
if {$show(id) eq {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI close $show(id)
    if {[close_issue $test show] eq $show(id)} {
        set iss(status)    {closed}
        set show(status)   $iss(status)
    }
}

#############################################################################

set test "list (closed issue)"
# closed issues aren't listed by default
if {$show(id) eq {} || $show2(id) eq {}} {
    unresolved $test
} else {
    set show_dict [dict create]
    dict append show_dict $show2(id) [dict create {*}[array get show2]]
    spawn $PYTHON $GI list
    list_issues $test $show_dict 1
}

#############################################################################

set test "list --all (closed issue)"
# `list --all` lists closed issues too
if {$show(id) eq {} || $show2(id) eq {}} {
    unresolved $test
} else {
    set show_dict [dict create]
    dict append show_dict $show(id) [dict create {*}[array get show]]
    dict append show_dict $show2(id) [dict create {*}[array get show2]]
    spawn $PYTHON $GI list --all
    list_issues $test $show_dict 2
}

#############################################################################

set test "edit issue (change status to invalid)"
if {$show(id) eq {}} {
    unresolved $test
} else {
    set iss(status)     {invalid}
    spawn $PYTHON $GI edit $show(id)
    if {[edit_or_add_issue $test iss show] eq $iss(id)} {
        set show(status)   $iss(status)
    }
}

#############################################################################

set test "list (invalid issue)"
# invalid issues aren't listed by default
if {$show(id) eq {} || $show2(id) eq {}} {
    unresolved $test
} else {
    set show_dict [dict create]
    dict append show_dict $show2(id) [dict create {*}[array get show2]]
    spawn $PYTHON $GI list
    list_issues $test $show_dict 1
}

#############################################################################

set test "list --all (invalid issue)"
# `list --all` lists invalid issues too
if {$show(id) eq {} || $show2(id) eq {}} {
    unresolved $test
} else {
    set show_dict [dict create]
    dict append show_dict $show(id) [dict create {*}[array get show]]
    dict append show_dict $show2(id) [dict create {*}[array get show2]]
    spawn $PYTHON $GI list --all
    list_issues $test $show_dict 2
}
