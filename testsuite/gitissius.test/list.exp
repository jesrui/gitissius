##############################################################################

source [file join $srcdir lib prepare_issue_1.exp]

##############################################################################

# Sleep one sec to ensure that iss and iss2 have different created_on and
# updated_on times
after 1000

source [file join $srcdir lib prepare_issue_2.exp]

##############################################################################

set filter_by "
assigned_to assigned_to__exact assigned_to__not assigned_to__startwith
created_on created_on__exact created_on__not created_on__startswith
id id__exact id__not id__startswith
reported_from reported_from__exact reported_from__not reported_from__startswith
status status__exact status__not status__startswith title
title__exact title__not title__startswith type
type__exact type__not type__startswith
updated_on updated_on__exact updated_on__not updated_on__startswith
"

foreach f $filter_by {
    set test "list --filter=$f"

    # The expected show array is either show or show2 depending on the filter
    # ending.
    array set expected \
        [if {[string first __not $f] == -1} {array get show} {array get show2}]
#    puts "$test expected [array get expected]"

    # Map filter names to show array names
    regsub "__.*$" $f {} tag

    # launch `git issius list` command and check output 
    check_list_issues $test "list {--filter=$f:$show($tag)}" -total expected
}

##############################################################################

set test "list --filter=id (substring)"
check_list_issues $test "list --filter=id:[string range $show(id) 10 20]" \
                      -total show

##############################################################################

set sorted_ids [lsort "$show(id)    $show2(id)"]
set sort_order {
    assigned_to     "$show2(id)   $show(id)"
    created_on      "$show(id)    $show2(id)"
    id              $sorted_ids
    reported_from   "$show(id)    $show2(id)"
    status          "$show(id)    $show2(id)"
    title           "$show(id)    $show2(id)"
    type            "$show(id)    $show2(id)"
    updated_on      "$show(id)    $show2(id)"
}

foreach {order id_order} $sort_order {
    set test "list --sort=$order"
    set id_order [subst $id_order]
    check_list_issues $test "list --sort=$order" -total -order $id_order show show2
}

##############################################################################

set test "close issue"
if {$show(id) eq {}} {
    unresolved $test
} else {
    spawn $PYTHON $GI close $show(id)
    if {[close_issue $test show] eq $show(id)} {
        set iss(status)    {closed}
        set show(status)   $iss(status)
    }
}

#############################################################################

set test "list (closed issue)"
# closed issues aren't listed by default
check_list_issues $test {list} -total show2

#############################################################################

set test "list --all (closed issue)"
# `list --all` lists closed issues too
check_list_issues $test {list --all} -total show show2

#############################################################################

set test "edit issue (change status to invalid)"
if {$show(id) eq {}} {
    unresolved $test
} else {
    set iss(status)     {invalid}
    spawn $PYTHON $GI edit $show(id)
    if {[edit_or_add_issue $test iss show] eq $iss(id)} {
        set show(status)   $iss(status)
    }
}

#############################################################################

set test "list (invalid issue)"
# invalid issues aren't listed by default
check_list_issues $test {list} -total show2

#############################################################################

set test "list --all (invalid issue)"
# `list --all` lists invalid issues too
check_list_issues $test {list --all} -total show show2
