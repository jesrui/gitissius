##############################################################################

array unset iss
array unset show

set iss(title)              {this is the issue title. It is so long that it will be trimmed by `git issius list`}
set iss(severity)           {high}
set iss(type)               {bug}
set iss(reported_from)      {Donald Duck <donald@example.com}
set iss(assigned_to)        {Micky Mouse <micky.mouse@example.com>}
set iss(status)             {assigned}
set iss(desc1)              {this is the first line of the issue description}
set iss(desc2)              {this is the second line of the issue description}


set show(title)             {None}
set show(severity)          {low}
set show(type)              {bug}
set show(reported_from)     {Micky Mouse <micky.mouse@example.com>}
set show(assigned_to)       {None}
set show(status)            {new}

set test "prepare issue 1 (add)"
spawn $PYTHON $GI add
set iss(id) [edit_or_add_issue $test iss show]

##############################################################################

set show(id)                $iss(id)
set show(title)             $iss(title)
set show(severity)          $iss(severity)
set show(type)              $iss(type)
set show(reported_from)     $iss(reported_from)
set show(assigned_to)       $iss(assigned_to)
set show(status)            $iss(status)
set show(desc1)             $iss(desc1)
set show(desc2)             $iss(desc2)

set test "prepare issue 1 (show)"
spawn $PYTHON $GI show $show(id)
show_issue $test show false

##############################################################################

array unset iss2
array unset show2

set iss2(title)             {this is the second issue}
set iss2(severity)          {medium}
set iss2(type)              {feature}
set iss2(reported_from)     {}
set iss2(assigned_to)       {}
set iss2(status)            {}
set iss2(desc1)             {this is the first line of the description of the second issue}
set iss2(desc2)             {this is the second line of the description of the second issue}

set show2(title)            {None}
set show2(severity)         {low}
set show2(type)             {bug}
set show2(reported_from)    {Micky Mouse <micky.mouse@example.com>}
set show2(assigned_to)      {None}
set show2(status)           {new}

# Sleep one sec to ensure that iss and iss2 have different created_on and
# updated_on values
after 1000

set test "prepare issue 2 (add)"
spawn $PYTHON $GI add
set iss2(id) [edit_or_add_issue $test iss2 show2]

##############################################################################

set show2(id)               $iss2(id)
set show2(title)            $iss2(title)
set show2(severity)         $iss2(severity)
set show2(type)             $iss2(type)
set show2(desc1)            $iss2(desc1)
set show2(desc2)            $iss2(desc2)

set test "prepare issue 2 (show)"
spawn $PYTHON $GI show $show2(id)
show_issue $test show2 false

##############################################################################

set filter_by "
assigned_to assigned_to__exact assigned_to__not assigned_to__startwith
created_on created_on__exact created_on__not created_on__startswith
id id__exact id__not id__startswith
reported_from reported_from__exact reported_from__not reported_from__startswith
status status__exact status__not status__startswith title
title__exact title__not title__startswith type
type__exact type__not type__startswith
updated_on updated_on__exact updated_on__not updated_on__startswith
"

foreach f $filter_by {
    set test "list --filter=$f"

    if {$show(id) eq {} || $show2(id) eq {}} {
        unresolved $test
        continue
    }

    # The expected show array is either show or show2 depending on the filter
    # ending.
    if {[string first __not $f] == -1 } {
        array set expected [array get show]
    } else {
        array set expected [array get show2]
    }
#    puts "$test expected [array get expected]"

    # Map filter names to show array names
    regsub "__.*$" $f {} tag

    # launch `git issius list` command and check output 
    set show_dict [dict create]
    dict append show_dict $expected(id) [dict create {*}[array get expected]]
#    puts "$test tag $tag show_dict $show_dict"
    spawn $PYTHON $GI list --filter=$f:$show($tag)
    list_issues $test $show_dict 1
}

##############################################################################

set test "list --filter=id (substring)"
if {$show(id) eq {}} {
    unresolved $test
} else {
    set show_dict [dict create]
    dict append show_dict $show(id) [dict create {*}[array get show]]
    spawn $PYTHON $GI list --filter=id:[string range $show(id) 10 20]
    list_issues $test $show_dict 1
}

